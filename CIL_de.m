clc
clear all
close all

addpath CostFunctions
addpath MEX
addpath Models
addpath Observers
addpath Utils
addpath Storage
addpath Wrappers

%% Script configuration
% folder name where the CIL data (generated by 'CIL_simu.m' script) is stored                                          
settings.ExperimentName = 'BZ_dim_32_N_25_norm';

% true - show the figures, false - do not show the figures
settings.ShowFigures = true;

% true - display information about intermediate progress,
% false - do not show any messages
settings.ShowMessages = true;

% estimation parameter names
estimatedParameterNames = {'A','B'};

% initial ranges of parameter values (please specify these values for all
% parameters!)
theta_min(1) = 8; theta_max(1) = 10; % parameter A
theta_min(2) = 10; theta_max(2) = 12; % parameter B

% DE settings
N=20; % population size
Niter=100; % number of iterations to perform
F=0.8; % mutation ratio
CR=0.5; % crossover ratio

%% Initialization

% initializing storage managers
storage_simu = StorageManager(settings.ExperimentName, 'CIL_simu');
storage_de = StorageManager(settings.ExperimentName, 'CIL_de');

% loading the CIL data and initializing the CIL cost function
simuData = load(storage_simu.createLocalPath('CIL_simu.mat'));
[model,cil,curve] = nlExtractCILData(simuData);
cf = CILCostFunction(cil,curve);
S0 = single(simuData.S0);

objFun = @(theta,data) ...
    cf.evaluate(model,...
    nlCreateStruct(estimatedParameterNames,theta),...
    S0);

% determining the dimension of the problem
D = length(estimatedParameterNames);

% randomly initialize the DE population in the region, specified by user
theta_min = repmat(theta_min,N,1);
theta_max = repmat(theta_max,N,1);

x = theta_min + (theta_max - theta_min).*rand(N,D);

% plotting the elements of initial population
if settings.ShowFigures
    f1=figure(1);
    clf
    nlCreateDEGraphics(0,x,Niter,estimatedParameterNames);
    pause
end

if settings.ShowMessages
    disp('Determining the best candidate in initial population...');
end

% evaluating the cost function for all population elements
fx = zeros(N,1);
for k=1:N
    fx(k) = objFun(x(k,:));
end

% finding the best candidate
[fxbest,ixbest]=min(fx);
xbest=x(ixbest,1:D);

if settings.ShowFigures
    f1=figure(1);
    nlCreateDEGraphics(0,x,Niter,estimatedParameterNames,ixbest);
    
    print(f1, storage_de.createLocalPath(...
    sprintf('Step_%i',0)), '-djpeg');
end

save(storage_de.createLocalPath(sprintf('data_step_%i.mat',0)),...
    'x','xbest','fx');

if settings.ShowMessages
    disp('Done!')
    disp('Beginning Differential Evolution optimization...');
end

%% DE optimization

% Iterate
for it=1:Niter
    
    [x,fx,xbest,fxbest] = nlRunDEStep(x,xbest,fx,F,CR,objFun);
    
    % saving the current population values
    save(storage_de.createLocalPath(sprintf('data_step_%i.mat',it)),...
        'x','xbest','fx');
    
    copyfile(storage_de.createLocalPath(sprintf('data_step_%i.mat',it)),...
        storage_de.createLocalPath('data_last_step.mat'));
    
    % plotting the current population values
    if settings.ShowFigures
        f1=figure(1);
        nlCreateDEGraphics(it,x,Niter,estimatedParameterNames,ixbest);
        
        print(f1, storage_de.createLocalPath(...
            sprintf('Step_%i',it)), '-djpeg');

        drawnow;
    end
    
    if settings.ShowMessages
        fprintf('Step %i has been finished!\n',it)

        disp('Mean value of the population')
        disp(mean(x))
        disp('Std of the population')
        disp(std(x))
        disp('Best candidate')
        disp(xbest)
        disp('Best value of the cost function')
        disp(fxbest)
    end
    
end

if settings.ShowMessages
    disp('All done!');
end









