clc
clear all
close all

addpath CostFunctions
addpath MEX
addpath Models
addpath Observers
addpath Storage
addpath Utils
addpath Wrappers

% Include path to MCMC toolbox.
addpath('C:\Users\Алексей Казарников\Documents\GitHub\NewLibrary\mcmcstat')

%% Script configuration
% folder name where the CIL data (generated by 'CIL_simu.m' script) is stored                                          
settings.ExperimentName = 'BZ_dim_32_N_25_norm';

% true - show the figures, false - do not show the figures
settings.ShowFigures = true;

% true - display information about intermediate progress,
% false - do not show any messages
settings.ShowMessages = true;

% true - load initial covariance from DE optimized values, false - use
% diagonal covariance
settings.ImportCovariance = false;


% parameter names to sample
samplingParameterNames = {'A','B'};
% Starting parameter values (if empty, values will be loaded from
% model parameters (model.Parameters field))
samplingParameterValues = {4.5, 8.72};


% MCMC configuration
nsimu = 100; %number of elements in one MCMC chain
nruns = 50;  %total number of MCMC chains 

%% Initialization

% initializing path managers for both directories
storage_de = StorageManager(settings.ExperimentName, 'CIL_de');
storage_simu = StorageManager(settings.ExperimentName, 'CIL_simu');
storage_mcmc = StorageManager(settings.ExperimentName, 'CIL_mcmc');

% loading the CIL data and initializing the CIL cost function
simuData = load(storage_simu.createLocalPath('CIL_simu.mat'));
[cf_model,cil,curve] = nlExtractCILData(simuData);
cf = CILCostFunction(cil,curve);
S0 = single(simuData.S0);

% setting up parameters for MCMC toolbox
params = cell(length(samplingParameterNames),1);
for k = 1:length(samplingParameterNames)
    parName = samplingParameterNames{k};
    if ~isempty(samplingParameterValues)
        parValue = samplingParameterValues{k};
    else
        parValue = getfield(cf_model.Parameters, parName);
    end
    params{k} = {parName, parValue, 0};
end

ss_fun = @(theta,data) ...
    cf.evaluate(cf_model,...
    nlCreateStruct(samplingParameterNames,theta),...
    S0);
                                                                                                                                                
model.ssfun  = ss_fun; 
model.sigma2 = 1; 

options.nsimu = nsimu;
options.verbosity=1;

if settings.ImportCovariance
    deData = load(storage_de.createLocalPath('data_last_step.mat'));
    options.qcov = cov(deData.x);
else
    options.qcov = 1e-8*eye(size(params,1));
end

% determining, if the experiment session has to be restored...
if isfile(storage_mcmc.createLocalPath('mcmc_temp.mat'))
    continueRun = true;
else
    continueRun = false;
end

%% MCMC chain generation %%
 
res=[]; %MCMC setting structure
c=[]; %resulting chain
i_start = 1; %index of chain, from which simulation will be started

% If specified in script settings, MCMC chain generation will be continued
% from saved state.
if(continueRun)
    load(storage_mcmc.createLocalPath('mcmc_temp.mat'));

    i_start=i+1;
    if settings.ShowMessages
        disp('Continuing MCMC simulations...')
        fprintf('Starting from iteration %i\n',i_start)
    end
end

if settings.ShowMessages
    disp('Beginning MCMC simulations...');
end

% Main loop for MCMC chain generation
for i=i_start:nruns
    if settings.ShowMessages
        fprintf('Iteration %i / %i has started\n',i,nruns)
    end
    
    [res,c_cur,s2,ss] = mcmcrun(model,[],params,options,res);
    c=[c; c_cur]; %updating the chain
    
    try
        save(storage_mcmc.createLocalPath('mcmc_temp.mat'),...
            'c',...
            'c_cur',...
            'model',...
            'params',...
            'options',...
            'res',...
            'i'); %saving current results
    catch
        disp('An error occured while saving data. Trying to save once again...');
        
        pause(1);
        
        save(storage_mcmc.createLocalPath('mcmc_temp.mat'),...
            'c',...
            'c_cur',...
            'model',...
            'params',...
            'options',...
            'res',...
            'i'); %saving current results
        
        disp('Save operation completed successfully');
    end
    
    if settings.ShowMessages
        fprintf('Iteration %i / %i has been finished\n',i,nruns)
    end
    
    if settings.ShowFigures
        f1=figure(1); clf
        mcmcplot(c,[],res.names,'chainpanel')

        f2=figure(2); clf
        mcmcplot(c,[],res,'denspanel',2);

        f3=figure(3); clf
        mcmcplot(c,[],res,'pairs');

        f4=figure(4); clf
        mcmcplot(c,[],res,'pairs',2);       
   
        print(f1, storage_mcmc.createLocalPath('Fig1'), '-djpeg');
        print(f2, storage_mcmc.createLocalPath('Fig2'), '-djpeg');
        print(f3, storage_mcmc.createLocalPath('Fig3'), '-djpeg');
        print(f4, storage_mcmc.createLocalPath('Fig4'), '-djpeg');
              
        pause(0.001)
    end
    
end  

%% Saving the results %%
if settings.ShowFigures
    
    f1=figure(1); clf
    mcmcplot(c,[],res.names,'chainpanel')

    f2=figure(2); clf
    mcmcplot(c,[],res,'denspanel',2);

    f3=figure(3); clf
    mcmcplot(c,[],res,'pairs');

    f4=figure(4); clf
    mcmcplot(c,[],res,'pairs',2);
    
    print(f1, storage_mcmc.createLocalPath('Fig1'), '-djpeg');
    print(f2, storage_mcmc.createLocalPath('Fig2'), '-djpeg');
    print(f3, storage_mcmc.createLocalPath('Fig3'), '-djpeg');
    print(f4, storage_mcmc.createLocalPath('Fig4'), '-djpeg');
end

save(storage_mcmc.createLocalPath('MC_mcmc_output.mat'), 'c', 'res');
    
if isfile(storage_mcmc.createLocalPath('mcmc_temp.mat'))
    delete(storage_mcmc.createLocalPath('mcmc_temp.mat'));
end

    


